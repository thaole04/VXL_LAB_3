/*
 * processing.c
 *
 *  Created on: Oct 18, 2023
 *      Author: thao2
 */


#include "processing.h"
#include "button.h"
#include "control_leds_segment.h"
#include "software_timer.h"


int timeRed = 5;
int timeAmber = 2;
int timeGreen = 3;
enum {
	LEDREDX_LEDGREENY,
	LEDREDX_LEDAMBERY,
	LEDREDY_LEDGREENX,
	LEDREDY_LEDAMBERX
} statusNormalMode = LEDREDX_LEDGREENY;
void INIT(){
	switch (statusNormalMode) {
		case LEDREDX_LEDGREENY:
			setTimerNormalModeX(timeRed);
			setTimerNormalModeY(timeGreen);
			break;
		case LEDREDX_LEDAMBERY:
			setTimerNormalModeX(timeRed);
			setTimerNormalModeY(timeAmber);
			break;
		case LEDREDY_LEDGREENX:
			setTimerNormalModeX(timeGreen);
			setTimerNormalModeY(timeRed);
			break;
		case LEDREDY_LEDAMBERX:
			setTimerNormalModeX(timeAmber);
			setTimerNormalModeY(timeRed);
			break;
		default:
			break;
	}
}
void normalMode(){
	switch (statusNormalMode) {
		case LEDREDX_LEDGREENY:
			if (timer_normal_mode_flagX==1){
				statusNormalMode = LEDREDY_LEDGREENX;
				setTimerNormalModeX(timeAmber);
				setTimerNormalModeY(timeRed);
			}
			if (timer_normal_mode_flagY == 1){
				statusNormalMode = LEDREDX_LEDAMBERY;
				setTimerNormalModeY(timeAmber);
			}
			break;
		case LEDREDX_LEDAMBERY:
			if (timer_normal_mode_flagX == 1){
				statusNormalMode = LEDREDY_LEDGREENX;
				setTimerNormalModeX(timeGreen);
				setTimerNormalModeY(timeRed);
			}
			if (timer_normal_mode_flagY == 1){
				statusNormalMode = LEDREDY_LEDGREENX;
				setTimerNormalModeX(timeGreen);
				setTimerNormalModeY(timeRed);
			}
			break;
		case LEDREDY_LEDGREENX:
			if (timer_normal_mode_flagY == 1){
				statusNormalMode = LEDREDX_LEDGREENY;
				setTimerNormalModeX(timeRed);
				setTimerNormalModeY(timeGreen);
			}
			if (timer_normal_mode_flagX == 1){
				statusNormalMode = LEDREDY_LEDAMBERX;
				setTimerNormalModeX(timeAmber);
			}
			break;
		case LEDREDY_LEDAMBERX:
			if (timer_normal_mode_flagY == 1){
				statusNormalMode = LEDREDX_LEDGREENY;
				setTimerNormalModeX(timeRed);
				setTimerNormalModeY(timeGreen);
			}
			if (timer_normal_mode_flagX == 1){
				statusNormalMode = LEDREDX_LEDGREENY;
				setTimerNormalModeX(timeRed);
				setTimerNormalModeY(timeGreen);
			}
			break;
		default:
			break;
	}
}

//void fsm(){
//	switch(mode){
//	case MODE_1:
//		normalMode();
//		break;
//	case MODE_2:
//		mode = MODE_3;
//		HAL_GPIO_TogglePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin);
//		break;
//	case MODE_3:
//		mode = MODE_4;
//		HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
//		break;
//	case MODE_4:
//		mode = MODE_1;
//		HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
//		break;
//	default:
//		mode = MODE_1;
//		break;
//	}
//}
