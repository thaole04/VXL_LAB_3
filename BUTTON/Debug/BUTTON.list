
BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d5c  08002d5c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002d5c  08002d5c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d5c  08002d5c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000064  08002dc8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002dc8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000925a  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a22  00000000  00000000  000292e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ad10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a88  00000000  00000000  0002c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b227  00000000  00000000  00042b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008250e  00000000  00000000  0004dd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  000d02a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d20 	.word	0x08002d20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002d20 	.word	0x08002d20

0800014c <keyProcessing>:
int keyRegPast[NUM_OF_BUTTONS] = {INITIAL_BUTTON_STATE, INITIAL_BUTTON_STATE, INITIAL_BUTTON_STATE};

int timerForKeyPress[NUM_OF_BUTTONS] = {TIME_PRESS, TIME_PRESS, TIME_PRESS};
int mode = 1;

void keyProcessing(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b02      	cmp	r3, #2
 8000158:	f000 80ab 	beq.w	80002b2 <keyProcessing+0x166>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b02      	cmp	r3, #2
 8000160:	f300 80c9 	bgt.w	80002f6 <keyProcessing+0x1aa>
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d003      	beq.n	8000172 <keyProcessing+0x26>
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d060      	beq.n	8000232 <keyProcessing+0xe6>
		default:
			break;
		}
		break;
	default:
		break;
 8000170:	e0c1      	b.n	80002f6 <keyProcessing+0x1aa>
		switch(mode){
 8000172:	4b63      	ldr	r3, [pc, #396]	; (8000300 <keyProcessing+0x1b4>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	3b01      	subs	r3, #1
 8000178:	2b03      	cmp	r3, #3
 800017a:	d855      	bhi.n	8000228 <keyProcessing+0xdc>
 800017c:	a201      	add	r2, pc, #4	; (adr r2, 8000184 <keyProcessing+0x38>)
 800017e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000182:	bf00      	nop
 8000184:	08000195 	.word	0x08000195
 8000188:	080001b9 	.word	0x080001b9
 800018c:	080001dd 	.word	0x080001dd
 8000190:	08000201 	.word	0x08000201
			mode = 2;
 8000194:	4b5a      	ldr	r3, [pc, #360]	; (8000300 <keyProcessing+0x1b4>)
 8000196:	2202      	movs	r2, #2
 8000198:	601a      	str	r2, [r3, #0]
			timeRedBuffer = timeRed;
 800019a:	4b5a      	ldr	r3, [pc, #360]	; (8000304 <keyProcessing+0x1b8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a5a      	ldr	r2, [pc, #360]	; (8000308 <keyProcessing+0x1bc>)
 80001a0:	6013      	str	r3, [r2, #0]
			timeAmberBuffer = timeAmber;
 80001a2:	4b5a      	ldr	r3, [pc, #360]	; (800030c <keyProcessing+0x1c0>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a5a      	ldr	r2, [pc, #360]	; (8000310 <keyProcessing+0x1c4>)
 80001a8:	6013      	str	r3, [r2, #0]
			timeGreenBuffer = timeGreen;
 80001aa:	4b5a      	ldr	r3, [pc, #360]	; (8000314 <keyProcessing+0x1c8>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a5a      	ldr	r2, [pc, #360]	; (8000318 <keyProcessing+0x1cc>)
 80001b0:	6013      	str	r3, [r2, #0]
			disableAllLeds();
 80001b2:	f000 ffb3 	bl	800111c <disableAllLeds>
			break;
 80001b6:	e03b      	b.n	8000230 <keyProcessing+0xe4>
			mode = 3;
 80001b8:	4b51      	ldr	r3, [pc, #324]	; (8000300 <keyProcessing+0x1b4>)
 80001ba:	2203      	movs	r2, #3
 80001bc:	601a      	str	r2, [r3, #0]
			timeRedBuffer = timeRed;
 80001be:	4b51      	ldr	r3, [pc, #324]	; (8000304 <keyProcessing+0x1b8>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a51      	ldr	r2, [pc, #324]	; (8000308 <keyProcessing+0x1bc>)
 80001c4:	6013      	str	r3, [r2, #0]
			timeAmberBuffer = timeAmber;
 80001c6:	4b51      	ldr	r3, [pc, #324]	; (800030c <keyProcessing+0x1c0>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a51      	ldr	r2, [pc, #324]	; (8000310 <keyProcessing+0x1c4>)
 80001cc:	6013      	str	r3, [r2, #0]
			timeGreenBuffer = timeGreen;
 80001ce:	4b51      	ldr	r3, [pc, #324]	; (8000314 <keyProcessing+0x1c8>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a51      	ldr	r2, [pc, #324]	; (8000318 <keyProcessing+0x1cc>)
 80001d4:	6013      	str	r3, [r2, #0]
			disableAllLeds();
 80001d6:	f000 ffa1 	bl	800111c <disableAllLeds>
			break;
 80001da:	e029      	b.n	8000230 <keyProcessing+0xe4>
			mode = 4;
 80001dc:	4b48      	ldr	r3, [pc, #288]	; (8000300 <keyProcessing+0x1b4>)
 80001de:	2204      	movs	r2, #4
 80001e0:	601a      	str	r2, [r3, #0]
			timeRedBuffer = timeRed;
 80001e2:	4b48      	ldr	r3, [pc, #288]	; (8000304 <keyProcessing+0x1b8>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a48      	ldr	r2, [pc, #288]	; (8000308 <keyProcessing+0x1bc>)
 80001e8:	6013      	str	r3, [r2, #0]
			timeAmberBuffer = timeAmber;
 80001ea:	4b48      	ldr	r3, [pc, #288]	; (800030c <keyProcessing+0x1c0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a48      	ldr	r2, [pc, #288]	; (8000310 <keyProcessing+0x1c4>)
 80001f0:	6013      	str	r3, [r2, #0]
			timeGreenBuffer = timeGreen;
 80001f2:	4b48      	ldr	r3, [pc, #288]	; (8000314 <keyProcessing+0x1c8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a48      	ldr	r2, [pc, #288]	; (8000318 <keyProcessing+0x1cc>)
 80001f8:	6013      	str	r3, [r2, #0]
			disableAllLeds();
 80001fa:	f000 ff8f 	bl	800111c <disableAllLeds>
			break;
 80001fe:	e017      	b.n	8000230 <keyProcessing+0xe4>
			mode = 1;
 8000200:	4b3f      	ldr	r3, [pc, #252]	; (8000300 <keyProcessing+0x1b4>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
			timeRedBuffer = timeRed;
 8000206:	4b3f      	ldr	r3, [pc, #252]	; (8000304 <keyProcessing+0x1b8>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a3f      	ldr	r2, [pc, #252]	; (8000308 <keyProcessing+0x1bc>)
 800020c:	6013      	str	r3, [r2, #0]
			timeAmberBuffer = timeAmber;
 800020e:	4b3f      	ldr	r3, [pc, #252]	; (800030c <keyProcessing+0x1c0>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a3f      	ldr	r2, [pc, #252]	; (8000310 <keyProcessing+0x1c4>)
 8000214:	6013      	str	r3, [r2, #0]
			timeGreenBuffer = timeGreen;
 8000216:	4b3f      	ldr	r3, [pc, #252]	; (8000314 <keyProcessing+0x1c8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a3f      	ldr	r2, [pc, #252]	; (8000318 <keyProcessing+0x1cc>)
 800021c:	6013      	str	r3, [r2, #0]
			disableAllLeds();
 800021e:	f000 ff7d 	bl	800111c <disableAllLeds>
			INIT_MODE();
 8000222:	f000 ff9f 	bl	8001164 <INIT_MODE>
			break;
 8000226:	e003      	b.n	8000230 <keyProcessing+0xe4>
			mode = 1;
 8000228:	4b35      	ldr	r3, [pc, #212]	; (8000300 <keyProcessing+0x1b4>)
 800022a:	2201      	movs	r2, #1
 800022c:	601a      	str	r2, [r3, #0]
			break;
 800022e:	bf00      	nop
		break;
 8000230:	e062      	b.n	80002f8 <keyProcessing+0x1ac>
		switch(mode){
 8000232:	4b33      	ldr	r3, [pc, #204]	; (8000300 <keyProcessing+0x1b4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	3b01      	subs	r3, #1
 8000238:	2b03      	cmp	r3, #3
 800023a:	d832      	bhi.n	80002a2 <keyProcessing+0x156>
 800023c:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <keyProcessing+0xf8>)
 800023e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000242:	bf00      	nop
 8000244:	080002a3 	.word	0x080002a3
 8000248:	08000255 	.word	0x08000255
 800024c:	0800026f 	.word	0x0800026f
 8000250:	08000289 	.word	0x08000289
			timeRedBuffer++;
 8000254:	4b2c      	ldr	r3, [pc, #176]	; (8000308 <keyProcessing+0x1bc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	4a2b      	ldr	r2, [pc, #172]	; (8000308 <keyProcessing+0x1bc>)
 800025c:	6013      	str	r3, [r2, #0]
			if (timeRedBuffer > 99){
 800025e:	4b2a      	ldr	r3, [pc, #168]	; (8000308 <keyProcessing+0x1bc>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b63      	cmp	r3, #99	; 0x63
 8000264:	dd1f      	ble.n	80002a6 <keyProcessing+0x15a>
				timeRedBuffer = 1;
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <keyProcessing+0x1bc>)
 8000268:	2201      	movs	r2, #1
 800026a:	601a      	str	r2, [r3, #0]
			break;
 800026c:	e01b      	b.n	80002a6 <keyProcessing+0x15a>
			timeAmberBuffer++;
 800026e:	4b28      	ldr	r3, [pc, #160]	; (8000310 <keyProcessing+0x1c4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3301      	adds	r3, #1
 8000274:	4a26      	ldr	r2, [pc, #152]	; (8000310 <keyProcessing+0x1c4>)
 8000276:	6013      	str	r3, [r2, #0]
			if (timeAmberBuffer > 99){
 8000278:	4b25      	ldr	r3, [pc, #148]	; (8000310 <keyProcessing+0x1c4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b63      	cmp	r3, #99	; 0x63
 800027e:	dd14      	ble.n	80002aa <keyProcessing+0x15e>
				timeAmberBuffer = 1;
 8000280:	4b23      	ldr	r3, [pc, #140]	; (8000310 <keyProcessing+0x1c4>)
 8000282:	2201      	movs	r2, #1
 8000284:	601a      	str	r2, [r3, #0]
			break;
 8000286:	e010      	b.n	80002aa <keyProcessing+0x15e>
			timeGreenBuffer++;
 8000288:	4b23      	ldr	r3, [pc, #140]	; (8000318 <keyProcessing+0x1cc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	4a22      	ldr	r2, [pc, #136]	; (8000318 <keyProcessing+0x1cc>)
 8000290:	6013      	str	r3, [r2, #0]
			if (timeGreenBuffer > 99){
 8000292:	4b21      	ldr	r3, [pc, #132]	; (8000318 <keyProcessing+0x1cc>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b63      	cmp	r3, #99	; 0x63
 8000298:	dd09      	ble.n	80002ae <keyProcessing+0x162>
				timeGreenBuffer = 1;
 800029a:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <keyProcessing+0x1cc>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
			break;
 80002a0:	e005      	b.n	80002ae <keyProcessing+0x162>
			break;
 80002a2:	bf00      	nop
 80002a4:	e028      	b.n	80002f8 <keyProcessing+0x1ac>
			break;
 80002a6:	bf00      	nop
 80002a8:	e026      	b.n	80002f8 <keyProcessing+0x1ac>
			break;
 80002aa:	bf00      	nop
 80002ac:	e024      	b.n	80002f8 <keyProcessing+0x1ac>
			break;
 80002ae:	bf00      	nop
		break;
 80002b0:	e022      	b.n	80002f8 <keyProcessing+0x1ac>
		switch(mode){
 80002b2:	4b13      	ldr	r3, [pc, #76]	; (8000300 <keyProcessing+0x1b4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d81a      	bhi.n	80002f2 <keyProcessing+0x1a6>
 80002bc:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <keyProcessing+0x178>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002f3 	.word	0x080002f3
 80002c8:	080002d5 	.word	0x080002d5
 80002cc:	080002df 	.word	0x080002df
 80002d0:	080002e9 	.word	0x080002e9
			timeRed = timeRedBuffer;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <keyProcessing+0x1bc>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <keyProcessing+0x1b8>)
 80002da:	6013      	str	r3, [r2, #0]
			break;
 80002dc:	e00a      	b.n	80002f4 <keyProcessing+0x1a8>
			timeAmber = timeAmberBuffer;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <keyProcessing+0x1c4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <keyProcessing+0x1c0>)
 80002e4:	6013      	str	r3, [r2, #0]
			break;
 80002e6:	e005      	b.n	80002f4 <keyProcessing+0x1a8>
			timeGreen = timeGreenBuffer;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <keyProcessing+0x1cc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a09      	ldr	r2, [pc, #36]	; (8000314 <keyProcessing+0x1c8>)
 80002ee:	6013      	str	r3, [r2, #0]
			break;
 80002f0:	e000      	b.n	80002f4 <keyProcessing+0x1a8>
			break;
 80002f2:	bf00      	nop
		break;
 80002f4:	e000      	b.n	80002f8 <keyProcessing+0x1ac>
		break;
 80002f6:	bf00      	nop
	}
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000003c 	.word	0x2000003c
 8000304:	20000040 	.word	0x20000040
 8000308:	2000004c 	.word	0x2000004c
 800030c:	20000044 	.word	0x20000044
 8000310:	20000050 	.word	0x20000050
 8000314:	20000048 	.word	0x20000048
 8000318:	20000054 	.word	0x20000054

0800031c <keyHoldProcessing>:

void keyHoldProcessing(int num){
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	keyProcessing(num);
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f7ff ff11 	bl	800014c <keyProcessing>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <getKeyInput>:

void getKeyInput(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++){
 800033a:	2300      	movs	r3, #0
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	e08e      	b.n	800045e <getKeyInput+0x12a>
		keyReg0[i] = keyReg1[i];
 8000340:	4a4b      	ldr	r2, [pc, #300]	; (8000470 <getKeyInput+0x13c>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000348:	494a      	ldr	r1, [pc, #296]	; (8000474 <getKeyInput+0x140>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 8000350:	4a49      	ldr	r2, [pc, #292]	; (8000478 <getKeyInput+0x144>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000358:	4945      	ldr	r1, [pc, #276]	; (8000470 <getKeyInput+0x13c>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d10a      	bne.n	800037c <getKeyInput+0x48>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036a:	4844      	ldr	r0, [pc, #272]	; (800047c <getKeyInput+0x148>)
 800036c:	f001 fca0 	bl	8001cb0 <HAL_GPIO_ReadPin>
 8000370:	4603      	mov	r3, r0
 8000372:	4619      	mov	r1, r3
 8000374:	4a40      	ldr	r2, [pc, #256]	; (8000478 <getKeyInput+0x144>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 1){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d10a      	bne.n	8000398 <getKeyInput+0x64>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000386:	483d      	ldr	r0, [pc, #244]	; (800047c <getKeyInput+0x148>)
 8000388:	f001 fc92 	bl	8001cb0 <HAL_GPIO_ReadPin>
 800038c:	4603      	mov	r3, r0
 800038e:	4619      	mov	r1, r3
 8000390:	4a39      	ldr	r2, [pc, #228]	; (8000478 <getKeyInput+0x144>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 2){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b02      	cmp	r3, #2
 800039c:	d10a      	bne.n	80003b4 <getKeyInput+0x80>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800039e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a2:	4836      	ldr	r0, [pc, #216]	; (800047c <getKeyInput+0x148>)
 80003a4:	f001 fc84 	bl	8001cb0 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4a32      	ldr	r2, [pc, #200]	; (8000478 <getKeyInput+0x144>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if ((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i])) { // stable input
 80003b4:	4a2f      	ldr	r2, [pc, #188]	; (8000474 <getKeyInput+0x140>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003bc:	492c      	ldr	r1, [pc, #176]	; (8000470 <getKeyInput+0x13c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d147      	bne.n	8000458 <getKeyInput+0x124>
 80003c8:	4a29      	ldr	r2, [pc, #164]	; (8000470 <getKeyInput+0x13c>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d0:	4929      	ldr	r1, [pc, #164]	; (8000478 <getKeyInput+0x144>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d13d      	bne.n	8000458 <getKeyInput+0x124>
			if (keyRegPast[i] != keyReg2[i]){ // press and release
 80003dc:	4a28      	ldr	r2, [pc, #160]	; (8000480 <getKeyInput+0x14c>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003e4:	4924      	ldr	r1, [pc, #144]	; (8000478 <getKeyInput+0x144>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d016      	beq.n	800041e <getKeyInput+0xea>
				keyRegPast[i] = keyReg2[i];
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <getKeyInput+0x144>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f8:	4921      	ldr	r1, [pc, #132]	; (8000480 <getKeyInput+0x14c>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] == BUTTON_IS_PRESSED) {
 8000400:	4a1d      	ldr	r2, [pc, #116]	; (8000478 <getKeyInput+0x144>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d125      	bne.n	8000458 <getKeyInput+0x124>
					timerForKeyPress[i] = TIME_PRESS;
 800040c:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <getKeyInput+0x150>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2164      	movs	r1, #100	; 0x64
 8000412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					// TODO
					keyProcessing(i);
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff fe98 	bl	800014c <keyProcessing>
 800041c:	e01c      	b.n	8000458 <getKeyInput+0x124>
				}
			}else { // press and hold
				timerForKeyPress[i]--;
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <getKeyInput+0x150>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	1e5a      	subs	r2, r3, #1
 8000428:	4916      	ldr	r1, [pc, #88]	; (8000484 <getKeyInput+0x150>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timerForKeyPress[i] <= 0){
 8000430:	4a14      	ldr	r2, [pc, #80]	; (8000484 <getKeyInput+0x150>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000438:	2b00      	cmp	r3, #0
 800043a:	dc0d      	bgt.n	8000458 <getKeyInput+0x124>
					timerForKeyPress[i] = TIME_PRESS;
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <getKeyInput+0x150>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2164      	movs	r1, #100	; 0x64
 8000442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					// TODO
					if (keyReg2[i] == BUTTON_IS_PRESSED){
 8000446:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <getKeyInput+0x144>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d102      	bne.n	8000458 <getKeyInput+0x124>
						keyHoldProcessing(i);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ff62 	bl	800031c <keyHoldProcessing>
	for (int i = 0; i < NUM_OF_BUTTONS; i++){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3301      	adds	r3, #1
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b02      	cmp	r3, #2
 8000462:	f77f af6d 	ble.w	8000340 <getKeyInput+0xc>
				}
			}
		}
	}

}
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	2000000c 	.word	0x2000000c
 8000474:	20000000 	.word	0x20000000
 8000478:	20000018 	.word	0x20000018
 800047c:	40011000 	.word	0x40011000
 8000480:	20000024 	.word	0x20000024
 8000484:	20000030 	.word	0x20000030

08000488 <setValueSEG0>:
 */


#include "control_leds_segment.h"

void setValueSEG0(int num){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b09      	cmp	r3, #9
 8000494:	f200 80ea 	bhi.w	800066c <setValueSEG0+0x1e4>
 8000498:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <setValueSEG0+0x18>)
 800049a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049e:	bf00      	nop
 80004a0:	080004c9 	.word	0x080004c9
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	0800051d 	.word	0x0800051d
 80004ac:	08000547 	.word	0x08000547
 80004b0:	08000571 	.word	0x08000571
 80004b4:	0800059b 	.word	0x0800059b
 80004b8:	080005c5 	.word	0x080005c5
 80004bc:	080005ef 	.word	0x080005ef
 80004c0:	08000619 	.word	0x08000619
 80004c4:	08000643 	.word	0x08000643
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	4876      	ldr	r0, [pc, #472]	; (80006a8 <setValueSEG0+0x220>)
 80004ce:	f001 fc06 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2102      	movs	r1, #2
 80004d6:	4874      	ldr	r0, [pc, #464]	; (80006a8 <setValueSEG0+0x220>)
 80004d8:	f001 fc01 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	4871      	ldr	r0, [pc, #452]	; (80006a8 <setValueSEG0+0x220>)
 80004e2:	f001 fbfc 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	486f      	ldr	r0, [pc, #444]	; (80006a8 <setValueSEG0+0x220>)
 80004ec:	f001 fbf7 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80004f0:	e0d5      	b.n	800069e <setValueSEG0+0x216>
	case 1:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	486c      	ldr	r0, [pc, #432]	; (80006a8 <setValueSEG0+0x220>)
 80004f8:	f001 fbf1 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2102      	movs	r1, #2
 8000500:	4869      	ldr	r0, [pc, #420]	; (80006a8 <setValueSEG0+0x220>)
 8000502:	f001 fbec 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2104      	movs	r1, #4
 800050a:	4867      	ldr	r0, [pc, #412]	; (80006a8 <setValueSEG0+0x220>)
 800050c:	f001 fbe7 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2108      	movs	r1, #8
 8000514:	4864      	ldr	r0, [pc, #400]	; (80006a8 <setValueSEG0+0x220>)
 8000516:	f001 fbe2 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 800051a:	e0c0      	b.n	800069e <setValueSEG0+0x216>
	case 2:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2101      	movs	r1, #1
 8000520:	4861      	ldr	r0, [pc, #388]	; (80006a8 <setValueSEG0+0x220>)
 8000522:	f001 fbdc 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	485f      	ldr	r0, [pc, #380]	; (80006a8 <setValueSEG0+0x220>)
 800052c:	f001 fbd7 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2104      	movs	r1, #4
 8000534:	485c      	ldr	r0, [pc, #368]	; (80006a8 <setValueSEG0+0x220>)
 8000536:	f001 fbd2 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	485a      	ldr	r0, [pc, #360]	; (80006a8 <setValueSEG0+0x220>)
 8000540:	f001 fbcd 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000544:	e0ab      	b.n	800069e <setValueSEG0+0x216>
	case 3:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2101      	movs	r1, #1
 800054a:	4857      	ldr	r0, [pc, #348]	; (80006a8 <setValueSEG0+0x220>)
 800054c:	f001 fbc7 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2102      	movs	r1, #2
 8000554:	4854      	ldr	r0, [pc, #336]	; (80006a8 <setValueSEG0+0x220>)
 8000556:	f001 fbc2 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2104      	movs	r1, #4
 800055e:	4852      	ldr	r0, [pc, #328]	; (80006a8 <setValueSEG0+0x220>)
 8000560:	f001 fbbd 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	484f      	ldr	r0, [pc, #316]	; (80006a8 <setValueSEG0+0x220>)
 800056a:	f001 fbb8 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 800056e:	e096      	b.n	800069e <setValueSEG0+0x216>
	case 4:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	484c      	ldr	r0, [pc, #304]	; (80006a8 <setValueSEG0+0x220>)
 8000576:	f001 fbb2 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2102      	movs	r1, #2
 800057e:	484a      	ldr	r0, [pc, #296]	; (80006a8 <setValueSEG0+0x220>)
 8000580:	f001 fbad 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	4847      	ldr	r0, [pc, #284]	; (80006a8 <setValueSEG0+0x220>)
 800058a:	f001 fba8 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	4845      	ldr	r0, [pc, #276]	; (80006a8 <setValueSEG0+0x220>)
 8000594:	f001 fba3 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000598:	e081      	b.n	800069e <setValueSEG0+0x216>
	case 5:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	4842      	ldr	r0, [pc, #264]	; (80006a8 <setValueSEG0+0x220>)
 80005a0:	f001 fb9d 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2102      	movs	r1, #2
 80005a8:	483f      	ldr	r0, [pc, #252]	; (80006a8 <setValueSEG0+0x220>)
 80005aa:	f001 fb98 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2104      	movs	r1, #4
 80005b2:	483d      	ldr	r0, [pc, #244]	; (80006a8 <setValueSEG0+0x220>)
 80005b4:	f001 fb93 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	483a      	ldr	r0, [pc, #232]	; (80006a8 <setValueSEG0+0x220>)
 80005be:	f001 fb8e 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80005c2:	e06c      	b.n	800069e <setValueSEG0+0x216>
	case 6:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2101      	movs	r1, #1
 80005c8:	4837      	ldr	r0, [pc, #220]	; (80006a8 <setValueSEG0+0x220>)
 80005ca:	f001 fb88 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2102      	movs	r1, #2
 80005d2:	4835      	ldr	r0, [pc, #212]	; (80006a8 <setValueSEG0+0x220>)
 80005d4:	f001 fb83 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2104      	movs	r1, #4
 80005dc:	4832      	ldr	r0, [pc, #200]	; (80006a8 <setValueSEG0+0x220>)
 80005de:	f001 fb7e 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2108      	movs	r1, #8
 80005e6:	4830      	ldr	r0, [pc, #192]	; (80006a8 <setValueSEG0+0x220>)
 80005e8:	f001 fb79 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80005ec:	e057      	b.n	800069e <setValueSEG0+0x216>
	case 7:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	482d      	ldr	r0, [pc, #180]	; (80006a8 <setValueSEG0+0x220>)
 80005f4:	f001 fb73 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2102      	movs	r1, #2
 80005fc:	482a      	ldr	r0, [pc, #168]	; (80006a8 <setValueSEG0+0x220>)
 80005fe:	f001 fb6e 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2104      	movs	r1, #4
 8000606:	4828      	ldr	r0, [pc, #160]	; (80006a8 <setValueSEG0+0x220>)
 8000608:	f001 fb69 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2108      	movs	r1, #8
 8000610:	4825      	ldr	r0, [pc, #148]	; (80006a8 <setValueSEG0+0x220>)
 8000612:	f001 fb64 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000616:	e042      	b.n	800069e <setValueSEG0+0x216>
	case 8:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	4822      	ldr	r0, [pc, #136]	; (80006a8 <setValueSEG0+0x220>)
 800061e:	f001 fb5e 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2102      	movs	r1, #2
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <setValueSEG0+0x220>)
 8000628:	f001 fb59 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	481d      	ldr	r0, [pc, #116]	; (80006a8 <setValueSEG0+0x220>)
 8000632:	f001 fb54 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2108      	movs	r1, #8
 800063a:	481b      	ldr	r0, [pc, #108]	; (80006a8 <setValueSEG0+0x220>)
 800063c:	f001 fb4f 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000640:	e02d      	b.n	800069e <setValueSEG0+0x216>
	case 9:
		HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <setValueSEG0+0x220>)
 8000648:	f001 fb49 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2102      	movs	r1, #2
 8000650:	4815      	ldr	r0, [pc, #84]	; (80006a8 <setValueSEG0+0x220>)
 8000652:	f001 fb44 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2104      	movs	r1, #4
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <setValueSEG0+0x220>)
 800065c:	f001 fb3f 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <setValueSEG0+0x220>)
 8000666:	f001 fb3a 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 800066a:	e018      	b.n	800069e <setValueSEG0+0x216>
	default:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <setValueSEG0+0x220>)
 8000674:	f001 fb33 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <setValueSEG0+0x220>)
 8000680:	f001 fb2d 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <setValueSEG0+0x220>)
 800068c:	f001 fb27 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <setValueSEG0+0x220>)
 8000698:	f001 fb21 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 800069c:	bf00      	nop
	}
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40010c00 	.word	0x40010c00

080006ac <setValueSEG1>:


void setValueSEG1(int num){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b09      	cmp	r3, #9
 80006b8:	f200 80ea 	bhi.w	8000890 <setValueSEG1+0x1e4>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <setValueSEG1+0x18>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006ed 	.word	0x080006ed
 80006c8:	08000717 	.word	0x08000717
 80006cc:	08000741 	.word	0x08000741
 80006d0:	0800076b 	.word	0x0800076b
 80006d4:	08000795 	.word	0x08000795
 80006d8:	080007bf 	.word	0x080007bf
 80006dc:	080007e9 	.word	0x080007e9
 80006e0:	08000813 	.word	0x08000813
 80006e4:	0800083d 	.word	0x0800083d
 80006e8:	08000867 	.word	0x08000867
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	4876      	ldr	r0, [pc, #472]	; (80008cc <setValueSEG1+0x220>)
 80006f2:	f001 faf4 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2120      	movs	r1, #32
 80006fa:	4874      	ldr	r0, [pc, #464]	; (80008cc <setValueSEG1+0x220>)
 80006fc:	f001 faef 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	4871      	ldr	r0, [pc, #452]	; (80008cc <setValueSEG1+0x220>)
 8000706:	f001 faea 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	486f      	ldr	r0, [pc, #444]	; (80008cc <setValueSEG1+0x220>)
 8000710:	f001 fae5 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000714:	e0d5      	b.n	80008c2 <setValueSEG1+0x216>
	case 1:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	486c      	ldr	r0, [pc, #432]	; (80008cc <setValueSEG1+0x220>)
 800071c:	f001 fadf 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	4869      	ldr	r0, [pc, #420]	; (80008cc <setValueSEG1+0x220>)
 8000726:	f001 fada 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4867      	ldr	r0, [pc, #412]	; (80008cc <setValueSEG1+0x220>)
 8000730:	f001 fad5 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	4864      	ldr	r0, [pc, #400]	; (80008cc <setValueSEG1+0x220>)
 800073a:	f001 fad0 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 800073e:	e0c0      	b.n	80008c2 <setValueSEG1+0x216>
	case 2:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	4861      	ldr	r0, [pc, #388]	; (80008cc <setValueSEG1+0x220>)
 8000746:	f001 faca 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	485f      	ldr	r0, [pc, #380]	; (80008cc <setValueSEG1+0x220>)
 8000750:	f001 fac5 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	485c      	ldr	r0, [pc, #368]	; (80008cc <setValueSEG1+0x220>)
 800075a:	f001 fac0 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	485a      	ldr	r0, [pc, #360]	; (80008cc <setValueSEG1+0x220>)
 8000764:	f001 fabb 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000768:	e0ab      	b.n	80008c2 <setValueSEG1+0x216>
	case 3:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	4857      	ldr	r0, [pc, #348]	; (80008cc <setValueSEG1+0x220>)
 8000770:	f001 fab5 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	4854      	ldr	r0, [pc, #336]	; (80008cc <setValueSEG1+0x220>)
 800077a:	f001 fab0 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	4852      	ldr	r0, [pc, #328]	; (80008cc <setValueSEG1+0x220>)
 8000784:	f001 faab 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	484f      	ldr	r0, [pc, #316]	; (80008cc <setValueSEG1+0x220>)
 800078e:	f001 faa6 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000792:	e096      	b.n	80008c2 <setValueSEG1+0x216>
	case 4:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2110      	movs	r1, #16
 8000798:	484c      	ldr	r0, [pc, #304]	; (80008cc <setValueSEG1+0x220>)
 800079a:	f001 faa0 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2120      	movs	r1, #32
 80007a2:	484a      	ldr	r0, [pc, #296]	; (80008cc <setValueSEG1+0x220>)
 80007a4:	f001 fa9b 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4847      	ldr	r0, [pc, #284]	; (80008cc <setValueSEG1+0x220>)
 80007ae:	f001 fa96 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	4845      	ldr	r0, [pc, #276]	; (80008cc <setValueSEG1+0x220>)
 80007b8:	f001 fa91 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80007bc:	e081      	b.n	80008c2 <setValueSEG1+0x216>
	case 5:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2110      	movs	r1, #16
 80007c2:	4842      	ldr	r0, [pc, #264]	; (80008cc <setValueSEG1+0x220>)
 80007c4:	f001 fa8b 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2120      	movs	r1, #32
 80007cc:	483f      	ldr	r0, [pc, #252]	; (80008cc <setValueSEG1+0x220>)
 80007ce:	f001 fa86 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	483d      	ldr	r0, [pc, #244]	; (80008cc <setValueSEG1+0x220>)
 80007d8:	f001 fa81 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	483a      	ldr	r0, [pc, #232]	; (80008cc <setValueSEG1+0x220>)
 80007e2:	f001 fa7c 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80007e6:	e06c      	b.n	80008c2 <setValueSEG1+0x216>
	case 6:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	4837      	ldr	r0, [pc, #220]	; (80008cc <setValueSEG1+0x220>)
 80007ee:	f001 fa76 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2120      	movs	r1, #32
 80007f6:	4835      	ldr	r0, [pc, #212]	; (80008cc <setValueSEG1+0x220>)
 80007f8:	f001 fa71 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4832      	ldr	r0, [pc, #200]	; (80008cc <setValueSEG1+0x220>)
 8000802:	f001 fa6c 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4830      	ldr	r0, [pc, #192]	; (80008cc <setValueSEG1+0x220>)
 800080c:	f001 fa67 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000810:	e057      	b.n	80008c2 <setValueSEG1+0x216>
	case 7:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	482d      	ldr	r0, [pc, #180]	; (80008cc <setValueSEG1+0x220>)
 8000818:	f001 fa61 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2120      	movs	r1, #32
 8000820:	482a      	ldr	r0, [pc, #168]	; (80008cc <setValueSEG1+0x220>)
 8000822:	f001 fa5c 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	4828      	ldr	r0, [pc, #160]	; (80008cc <setValueSEG1+0x220>)
 800082c:	f001 fa57 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	4825      	ldr	r0, [pc, #148]	; (80008cc <setValueSEG1+0x220>)
 8000836:	f001 fa52 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 800083a:	e042      	b.n	80008c2 <setValueSEG1+0x216>
	case 8:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	4822      	ldr	r0, [pc, #136]	; (80008cc <setValueSEG1+0x220>)
 8000842:	f001 fa4c 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	4820      	ldr	r0, [pc, #128]	; (80008cc <setValueSEG1+0x220>)
 800084c:	f001 fa47 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	481d      	ldr	r0, [pc, #116]	; (80008cc <setValueSEG1+0x220>)
 8000856:	f001 fa42 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	481b      	ldr	r0, [pc, #108]	; (80008cc <setValueSEG1+0x220>)
 8000860:	f001 fa3d 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000864:	e02d      	b.n	80008c2 <setValueSEG1+0x216>
	case 9:
		HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <setValueSEG1+0x220>)
 800086c:	f001 fa37 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2120      	movs	r1, #32
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <setValueSEG1+0x220>)
 8000876:	f001 fa32 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <setValueSEG1+0x220>)
 8000880:	f001 fa2d 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <setValueSEG1+0x220>)
 800088a:	f001 fa28 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 800088e:	e018      	b.n	80008c2 <setValueSEG1+0x216>
	default:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <setValueSEG1+0x220>)
 8000898:	f001 fa21 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <setValueSEG1+0x220>)
 80008a4:	f001 fa1b 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <setValueSEG1+0x220>)
 80008b0:	f001 fa15 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <setValueSEG1+0x220>)
 80008bc:	f001 fa0f 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80008c0:	bf00      	nop
	}
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <setValueSEG2>:


void setValueSEG2(int num){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b09      	cmp	r3, #9
 80008dc:	f200 8112 	bhi.w	8000b04 <setValueSEG2+0x234>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <setValueSEG2+0x18>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000911 	.word	0x08000911
 80008ec:	08000943 	.word	0x08000943
 80008f0:	08000975 	.word	0x08000975
 80008f4:	080009a7 	.word	0x080009a7
 80008f8:	080009d9 	.word	0x080009d9
 80008fc:	08000a0b 	.word	0x08000a0b
 8000900:	08000a3d 	.word	0x08000a3d
 8000904:	08000a6f 	.word	0x08000a6f
 8000908:	08000aa1 	.word	0x08000aa1
 800090c:	08000ad3 	.word	0x08000ad3
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	488a      	ldr	r0, [pc, #552]	; (8000b40 <setValueSEG2+0x270>)
 8000918:	f001 f9e1 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000922:	4887      	ldr	r0, [pc, #540]	; (8000b40 <setValueSEG2+0x270>)
 8000924:	f001 f9db 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	4884      	ldr	r0, [pc, #528]	; (8000b40 <setValueSEG2+0x270>)
 8000930:	f001 f9d5 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4881      	ldr	r0, [pc, #516]	; (8000b40 <setValueSEG2+0x270>)
 800093c:	f001 f9cf 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000940:	e0f9      	b.n	8000b36 <setValueSEG2+0x266>
	case 1:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000948:	487d      	ldr	r0, [pc, #500]	; (8000b40 <setValueSEG2+0x270>)
 800094a:	f001 f9c8 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000954:	487a      	ldr	r0, [pc, #488]	; (8000b40 <setValueSEG2+0x270>)
 8000956:	f001 f9c2 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000960:	4877      	ldr	r0, [pc, #476]	; (8000b40 <setValueSEG2+0x270>)
 8000962:	f001 f9bc 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096c:	4874      	ldr	r0, [pc, #464]	; (8000b40 <setValueSEG2+0x270>)
 800096e:	f001 f9b6 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000972:	e0e0      	b.n	8000b36 <setValueSEG2+0x266>
	case 2:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	4871      	ldr	r0, [pc, #452]	; (8000b40 <setValueSEG2+0x270>)
 800097c:	f001 f9af 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000986:	486e      	ldr	r0, [pc, #440]	; (8000b40 <setValueSEG2+0x270>)
 8000988:	f001 f9a9 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000992:	486b      	ldr	r0, [pc, #428]	; (8000b40 <setValueSEG2+0x270>)
 8000994:	f001 f9a3 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099e:	4868      	ldr	r0, [pc, #416]	; (8000b40 <setValueSEG2+0x270>)
 80009a0:	f001 f99d 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80009a4:	e0c7      	b.n	8000b36 <setValueSEG2+0x266>
	case 3:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ac:	4864      	ldr	r0, [pc, #400]	; (8000b40 <setValueSEG2+0x270>)
 80009ae:	f001 f996 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b8:	4861      	ldr	r0, [pc, #388]	; (8000b40 <setValueSEG2+0x270>)
 80009ba:	f001 f990 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c4:	485e      	ldr	r0, [pc, #376]	; (8000b40 <setValueSEG2+0x270>)
 80009c6:	f001 f98a 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d0:	485b      	ldr	r0, [pc, #364]	; (8000b40 <setValueSEG2+0x270>)
 80009d2:	f001 f984 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 80009d6:	e0ae      	b.n	8000b36 <setValueSEG2+0x266>
	case 4:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	4858      	ldr	r0, [pc, #352]	; (8000b40 <setValueSEG2+0x270>)
 80009e0:	f001 f97d 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ea:	4855      	ldr	r0, [pc, #340]	; (8000b40 <setValueSEG2+0x270>)
 80009ec:	f001 f977 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f6:	4852      	ldr	r0, [pc, #328]	; (8000b40 <setValueSEG2+0x270>)
 80009f8:	f001 f971 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a02:	484f      	ldr	r0, [pc, #316]	; (8000b40 <setValueSEG2+0x270>)
 8000a04:	f001 f96b 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000a08:	e095      	b.n	8000b36 <setValueSEG2+0x266>
	case 5:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	484b      	ldr	r0, [pc, #300]	; (8000b40 <setValueSEG2+0x270>)
 8000a12:	f001 f964 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1c:	4848      	ldr	r0, [pc, #288]	; (8000b40 <setValueSEG2+0x270>)
 8000a1e:	f001 f95e 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a28:	4845      	ldr	r0, [pc, #276]	; (8000b40 <setValueSEG2+0x270>)
 8000a2a:	f001 f958 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a34:	4842      	ldr	r0, [pc, #264]	; (8000b40 <setValueSEG2+0x270>)
 8000a36:	f001 f952 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000a3a:	e07c      	b.n	8000b36 <setValueSEG2+0x266>
	case 6:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	483f      	ldr	r0, [pc, #252]	; (8000b40 <setValueSEG2+0x270>)
 8000a44:	f001 f94b 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4e:	483c      	ldr	r0, [pc, #240]	; (8000b40 <setValueSEG2+0x270>)
 8000a50:	f001 f945 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	4839      	ldr	r0, [pc, #228]	; (8000b40 <setValueSEG2+0x270>)
 8000a5c:	f001 f93f 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a66:	4836      	ldr	r0, [pc, #216]	; (8000b40 <setValueSEG2+0x270>)
 8000a68:	f001 f939 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000a6c:	e063      	b.n	8000b36 <setValueSEG2+0x266>
	case 7:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	4832      	ldr	r0, [pc, #200]	; (8000b40 <setValueSEG2+0x270>)
 8000a76:	f001 f932 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a80:	482f      	ldr	r0, [pc, #188]	; (8000b40 <setValueSEG2+0x270>)
 8000a82:	f001 f92c 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8c:	482c      	ldr	r0, [pc, #176]	; (8000b40 <setValueSEG2+0x270>)
 8000a8e:	f001 f926 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a98:	4829      	ldr	r0, [pc, #164]	; (8000b40 <setValueSEG2+0x270>)
 8000a9a:	f001 f920 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000a9e:	e04a      	b.n	8000b36 <setValueSEG2+0x266>
	case 8:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa6:	4826      	ldr	r0, [pc, #152]	; (8000b40 <setValueSEG2+0x270>)
 8000aa8:	f001 f919 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab2:	4823      	ldr	r0, [pc, #140]	; (8000b40 <setValueSEG2+0x270>)
 8000ab4:	f001 f913 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abe:	4820      	ldr	r0, [pc, #128]	; (8000b40 <setValueSEG2+0x270>)
 8000ac0:	f001 f90d 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aca:	481d      	ldr	r0, [pc, #116]	; (8000b40 <setValueSEG2+0x270>)
 8000acc:	f001 f907 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000ad0:	e031      	b.n	8000b36 <setValueSEG2+0x266>
	case 9:
		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad8:	4819      	ldr	r0, [pc, #100]	; (8000b40 <setValueSEG2+0x270>)
 8000ada:	f001 f900 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	4816      	ldr	r0, [pc, #88]	; (8000b40 <setValueSEG2+0x270>)
 8000ae6:	f001 f8fa 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <setValueSEG2+0x270>)
 8000af2:	f001 f8f4 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <setValueSEG2+0x270>)
 8000afe:	f001 f8ee 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000b02:	e018      	b.n	8000b36 <setValueSEG2+0x266>
	default:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <setValueSEG2+0x270>)
 8000b0c:	f001 f8e7 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b16:	480a      	ldr	r0, [pc, #40]	; (8000b40 <setValueSEG2+0x270>)
 8000b18:	f001 f8e1 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <setValueSEG2+0x270>)
 8000b24:	f001 f8db 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <setValueSEG2+0x270>)
 8000b30:	f001 f8d5 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <setValueSEG3>:


void setValueSEG3(int num){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b09      	cmp	r3, #9
 8000b50:	f200 8112 	bhi.w	8000d78 <setValueSEG3+0x234>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <setValueSEG3+0x18>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000b85 	.word	0x08000b85
 8000b60:	08000bb7 	.word	0x08000bb7
 8000b64:	08000be9 	.word	0x08000be9
 8000b68:	08000c1b 	.word	0x08000c1b
 8000b6c:	08000c4d 	.word	0x08000c4d
 8000b70:	08000c7f 	.word	0x08000c7f
 8000b74:	08000cb1 	.word	0x08000cb1
 8000b78:	08000ce3 	.word	0x08000ce3
 8000b7c:	08000d15 	.word	0x08000d15
 8000b80:	08000d47 	.word	0x08000d47
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8a:	488a      	ldr	r0, [pc, #552]	; (8000db4 <setValueSEG3+0x270>)
 8000b8c:	f001 f8a7 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	4887      	ldr	r0, [pc, #540]	; (8000db4 <setValueSEG3+0x270>)
 8000b98:	f001 f8a1 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba2:	4884      	ldr	r0, [pc, #528]	; (8000db4 <setValueSEG3+0x270>)
 8000ba4:	f001 f89b 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bae:	4881      	ldr	r0, [pc, #516]	; (8000db4 <setValueSEG3+0x270>)
 8000bb0:	f001 f895 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000bb4:	e0f9      	b.n	8000daa <setValueSEG3+0x266>
	case 1:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bbc:	487d      	ldr	r0, [pc, #500]	; (8000db4 <setValueSEG3+0x270>)
 8000bbe:	f001 f88e 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc8:	487a      	ldr	r0, [pc, #488]	; (8000db4 <setValueSEG3+0x270>)
 8000bca:	f001 f888 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd4:	4877      	ldr	r0, [pc, #476]	; (8000db4 <setValueSEG3+0x270>)
 8000bd6:	f001 f882 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be0:	4874      	ldr	r0, [pc, #464]	; (8000db4 <setValueSEG3+0x270>)
 8000be2:	f001 f87c 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000be6:	e0e0      	b.n	8000daa <setValueSEG3+0x266>
	case 2:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	4871      	ldr	r0, [pc, #452]	; (8000db4 <setValueSEG3+0x270>)
 8000bf0:	f001 f875 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfa:	486e      	ldr	r0, [pc, #440]	; (8000db4 <setValueSEG3+0x270>)
 8000bfc:	f001 f86f 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c06:	486b      	ldr	r0, [pc, #428]	; (8000db4 <setValueSEG3+0x270>)
 8000c08:	f001 f869 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4868      	ldr	r0, [pc, #416]	; (8000db4 <setValueSEG3+0x270>)
 8000c14:	f001 f863 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000c18:	e0c7      	b.n	8000daa <setValueSEG3+0x266>
	case 3:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c20:	4864      	ldr	r0, [pc, #400]	; (8000db4 <setValueSEG3+0x270>)
 8000c22:	f001 f85c 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4861      	ldr	r0, [pc, #388]	; (8000db4 <setValueSEG3+0x270>)
 8000c2e:	f001 f856 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c38:	485e      	ldr	r0, [pc, #376]	; (8000db4 <setValueSEG3+0x270>)
 8000c3a:	f001 f850 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c44:	485b      	ldr	r0, [pc, #364]	; (8000db4 <setValueSEG3+0x270>)
 8000c46:	f001 f84a 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000c4a:	e0ae      	b.n	8000daa <setValueSEG3+0x266>
	case 4:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c52:	4858      	ldr	r0, [pc, #352]	; (8000db4 <setValueSEG3+0x270>)
 8000c54:	f001 f843 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	4855      	ldr	r0, [pc, #340]	; (8000db4 <setValueSEG3+0x270>)
 8000c60:	f001 f83d 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6a:	4852      	ldr	r0, [pc, #328]	; (8000db4 <setValueSEG3+0x270>)
 8000c6c:	f001 f837 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c76:	484f      	ldr	r0, [pc, #316]	; (8000db4 <setValueSEG3+0x270>)
 8000c78:	f001 f831 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000c7c:	e095      	b.n	8000daa <setValueSEG3+0x266>
	case 5:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	484b      	ldr	r0, [pc, #300]	; (8000db4 <setValueSEG3+0x270>)
 8000c86:	f001 f82a 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	4848      	ldr	r0, [pc, #288]	; (8000db4 <setValueSEG3+0x270>)
 8000c92:	f001 f824 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9c:	4845      	ldr	r0, [pc, #276]	; (8000db4 <setValueSEG3+0x270>)
 8000c9e:	f001 f81e 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca8:	4842      	ldr	r0, [pc, #264]	; (8000db4 <setValueSEG3+0x270>)
 8000caa:	f001 f818 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000cae:	e07c      	b.n	8000daa <setValueSEG3+0x266>
	case 6:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb6:	483f      	ldr	r0, [pc, #252]	; (8000db4 <setValueSEG3+0x270>)
 8000cb8:	f001 f811 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	483c      	ldr	r0, [pc, #240]	; (8000db4 <setValueSEG3+0x270>)
 8000cc4:	f001 f80b 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cce:	4839      	ldr	r0, [pc, #228]	; (8000db4 <setValueSEG3+0x270>)
 8000cd0:	f001 f805 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cda:	4836      	ldr	r0, [pc, #216]	; (8000db4 <setValueSEG3+0x270>)
 8000cdc:	f000 ffff 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000ce0:	e063      	b.n	8000daa <setValueSEG3+0x266>
	case 7:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce8:	4832      	ldr	r0, [pc, #200]	; (8000db4 <setValueSEG3+0x270>)
 8000cea:	f000 fff8 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	482f      	ldr	r0, [pc, #188]	; (8000db4 <setValueSEG3+0x270>)
 8000cf6:	f000 fff2 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d00:	482c      	ldr	r0, [pc, #176]	; (8000db4 <setValueSEG3+0x270>)
 8000d02:	f000 ffec 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	4829      	ldr	r0, [pc, #164]	; (8000db4 <setValueSEG3+0x270>)
 8000d0e:	f000 ffe6 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000d12:	e04a      	b.n	8000daa <setValueSEG3+0x266>
	case 8:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1a:	4826      	ldr	r0, [pc, #152]	; (8000db4 <setValueSEG3+0x270>)
 8000d1c:	f000 ffdf 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4823      	ldr	r0, [pc, #140]	; (8000db4 <setValueSEG3+0x270>)
 8000d28:	f000 ffd9 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d32:	4820      	ldr	r0, [pc, #128]	; (8000db4 <setValueSEG3+0x270>)
 8000d34:	f000 ffd3 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	481d      	ldr	r0, [pc, #116]	; (8000db4 <setValueSEG3+0x270>)
 8000d40:	f000 ffcd 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000d44:	e031      	b.n	8000daa <setValueSEG3+0x266>
	case 9:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	4819      	ldr	r0, [pc, #100]	; (8000db4 <setValueSEG3+0x270>)
 8000d4e:	f000 ffc6 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d58:	4816      	ldr	r0, [pc, #88]	; (8000db4 <setValueSEG3+0x270>)
 8000d5a:	f000 ffc0 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <setValueSEG3+0x270>)
 8000d66:	f000 ffba 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <setValueSEG3+0x270>)
 8000d72:	f000 ffb4 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000d76:	e018      	b.n	8000daa <setValueSEG3+0x266>
	default:
		HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <setValueSEG3+0x270>)
 8000d80:	f000 ffad 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	480a      	ldr	r0, [pc, #40]	; (8000db4 <setValueSEG3+0x270>)
 8000d8c:	f000 ffa7 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <setValueSEG3+0x270>)
 8000d98:	f000 ffa1 	bl	8001cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <setValueSEG3+0x270>)
 8000da4:	f000 ff9b 	bl	8001cde <HAL_GPIO_WritePin>
		break;
 8000da8:	bf00      	nop
	}
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <displayNumSEGX>:

void displayNumSEGX(int num){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	setValueSEG0(num/10);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <displayNumSEGX+0x44>)
 8000dc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc8:	1092      	asrs	r2, r2, #2
 8000dca:	17db      	asrs	r3, r3, #31
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fb5a 	bl	8000488 <setValueSEG0>
	setValueSEG1(num%10);
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <displayNumSEGX+0x44>)
 8000dd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000ddc:	1099      	asrs	r1, r3, #2
 8000dde:	17d3      	asrs	r3, r2, #31
 8000de0:	1ac9      	subs	r1, r1, r3
 8000de2:	460b      	mov	r3, r1
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	1ad1      	subs	r1, r2, r3
 8000dec:	4608      	mov	r0, r1
 8000dee:	f7ff fc5d 	bl	80006ac <setValueSEG1>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	66666667 	.word	0x66666667

08000e00 <displayNumSEGY>:
void displayNumSEGY(int num){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	setValueSEG2(num/10);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <displayNumSEGY+0x44>)
 8000e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e10:	1092      	asrs	r2, r2, #2
 8000e12:	17db      	asrs	r3, r3, #31
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fd5a 	bl	80008d0 <setValueSEG2>
	setValueSEG3(num%10);
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <displayNumSEGY+0x44>)
 8000e20:	fb83 1302 	smull	r1, r3, r3, r2
 8000e24:	1099      	asrs	r1, r3, #2
 8000e26:	17d3      	asrs	r3, r2, #31
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	1ad1      	subs	r1, r2, r3
 8000e34:	4608      	mov	r0, r1
 8000e36:	f7ff fe85 	bl	8000b44 <setValueSEG3>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	66666667 	.word	0x66666667

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fc46 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f844 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f8ca 	bl	8000fec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e58:	f000 f87c 	bl	8000f54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e5c:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <main+0x78>)
 8000e5e:	f001 fb9b 	bl	8002598 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  INIT_MODE();
 8000e62:	f000 f97f 	bl	8001164 <INIT_MODE>
  disableAllLeds();
 8000e66:	f000 f959 	bl	800111c <disableAllLeds>
  setTimer0(100);
 8000e6a:	2064      	movs	r0, #100	; 0x64
 8000e6c:	f000 fb04 	bl	8001478 <setTimer0>
  setTimerBlink(50);
 8000e70:	2032      	movs	r0, #50	; 0x32
 8000e72:	f000 fb15 	bl	80014a0 <setTimerBlink>
  while (1)
  {
	  if (timer0_flag == 1){
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <main+0x7c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d1fb      	bne.n	8000e76 <main+0x2e>
		  if (mode == 1){
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <main+0x80>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d117      	bne.n	8000eb6 <main+0x6e>
			timer_normal_modeX--;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <main+0x84>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <main+0x84>)
 8000e8e:	6013      	str	r3, [r2, #0]
			if (timer_normal_modeX <= 0){
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <main+0x84>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	dc02      	bgt.n	8000e9e <main+0x56>
				timer_normal_mode_flagX = 1;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <main+0x88>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
			}
			timer_normal_modeY--;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <main+0x8c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <main+0x8c>)
 8000ea6:	6013      	str	r3, [r2, #0]
			if (timer_normal_modeY <= 0){
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <main+0x8c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dc02      	bgt.n	8000eb6 <main+0x6e>
				timer_normal_mode_flagY = 1;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <main+0x90>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
			}
		  }
		  setTimer0(100);
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f000 fade 	bl	8001478 <setTimer0>
	  if (timer0_flag == 1){
 8000ebc:	e7db      	b.n	8000e76 <main+0x2e>
 8000ebe:	bf00      	nop
 8000ec0:	200000a4 	.word	0x200000a4
 8000ec4:	20000088 	.word	0x20000088
 8000ec8:	2000003c 	.word	0x2000003c
 8000ecc:	20000094 	.word	0x20000094
 8000ed0:	20000098 	.word	0x20000098
 8000ed4:	2000009c 	.word	0x2000009c
 8000ed8:	200000a0 	.word	0x200000a0

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b090      	sub	sp, #64	; 0x40
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 ff10 	bl	8002d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f06:	2310      	movs	r3, #16
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 ff14 	bl	8001d40 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f8f7 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 f980 	bl	8002240 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f46:	f000 f8e3 	bl	8001110 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3740      	adds	r7, #64	; 0x40
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f7a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f88:	2209      	movs	r2, #9
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f9a:	f001 faad 	bl	80024f8 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa4:	f000 f8b4 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fb6:	f001 fc43 	bl	8002840 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 f8a6 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fd2:	f001 fe0f 	bl	8002bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 f898 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200000a4 	.word	0x200000a4

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <MX_GPIO_Init+0xd0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MX_GPIO_Init+0xd0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <MX_GPIO_Init+0xd0>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_GPIO_Init+0xd0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_X_Pin|LED_AMBER_X_Pin|LED_GREEN_X_Pin|LED_RED_Y_Pin
 8001048:	2200      	movs	r2, #0
 800104a:	217e      	movs	r1, #126	; 0x7e
 800104c:	481c      	ldr	r0, [pc, #112]	; (80010c0 <MX_GPIO_Init+0xd4>)
 800104e:	f000 fe46 	bl	8001cde <HAL_GPIO_WritePin>
                          |LED_AMBER_Y_Pin|LED_GREEN_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_A_Pin|SEG0_B_Pin|SEG0_C_Pin|SEG2_C_Pin
 8001052:	2200      	movs	r2, #0
 8001054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001058:	481a      	ldr	r0, [pc, #104]	; (80010c4 <MX_GPIO_Init+0xd8>)
 800105a:	f000 fe40 	bl	8001cde <HAL_GPIO_WritePin>
                          |SEG2_D_Pin|SEG3_A_Pin|SEG3_B_Pin|SEG3_C_Pin
                          |SEG3_D_Pin|SEG0_D_Pin|SEG1_A_Pin|SEG1_B_Pin
                          |SEG1_C_Pin|SEG1_D_Pin|SEG2_A_Pin|SEG2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800105e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	4815      	ldr	r0, [pc, #84]	; (80010c8 <MX_GPIO_Init+0xdc>)
 8001074:	f000 fca2 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_X_Pin LED_AMBER_X_Pin LED_GREEN_X_Pin LED_RED_Y_Pin
                           LED_AMBER_Y_Pin LED_GREEN_Y_Pin */
  GPIO_InitStruct.Pin = LED_RED_X_Pin|LED_AMBER_X_Pin|LED_GREEN_X_Pin|LED_RED_Y_Pin
 8001078:	237e      	movs	r3, #126	; 0x7e
 800107a:	613b      	str	r3, [r7, #16]
                          |LED_AMBER_Y_Pin|LED_GREEN_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_GPIO_Init+0xd4>)
 8001090:	f000 fc94 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_A_Pin SEG0_B_Pin SEG0_C_Pin SEG2_C_Pin
                           SEG2_D_Pin SEG3_A_Pin SEG3_B_Pin SEG3_C_Pin
                           SEG3_D_Pin SEG0_D_Pin SEG1_A_Pin SEG1_B_Pin
                           SEG1_C_Pin SEG1_D_Pin SEG2_A_Pin SEG2_B_Pin */
  GPIO_InitStruct.Pin = SEG0_A_Pin|SEG0_B_Pin|SEG0_C_Pin|SEG2_C_Pin
 8001094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001098:	613b      	str	r3, [r7, #16]
                          |SEG2_D_Pin|SEG3_A_Pin|SEG3_B_Pin|SEG3_C_Pin
                          |SEG3_D_Pin|SEG0_D_Pin|SEG1_A_Pin|SEG1_B_Pin
                          |SEG1_C_Pin|SEG1_D_Pin|SEG2_A_Pin|SEG2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_GPIO_Init+0xd8>)
 80010ae:	f000 fc85 	bl	80019bc <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000

080010cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	// Timer TODO
	timerRun();
 80010d4:	f000 fa20 	bl	8001518 <timerRun>
	getKeyInput();
 80010d8:	f7ff f92c 	bl	8000334 <getKeyInput>
	fsm();
 80010dc:	f000 f9a6 	bl	800142c <fsm>
	if (mode == 1){
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d109      	bne.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x30>
		displayNumSEGX(timer_normal_modeX);
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fe63 	bl	8000db8 <displayNumSEGX>
		displayNumSEGY(timer_normal_modeY);
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe82 	bl	8000e00 <displayNumSEGY>
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000003c 	.word	0x2000003c
 8001108:	20000094 	.word	0x20000094
 800110c:	2000009c 	.word	0x2000009c

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <disableAllLeds>:
#include "processing.h"
#include "button.h"
#include "control_leds_segment.h"
#include "software_timer.h"

void disableAllLeds(){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2102      	movs	r1, #2
 8001124:	480e      	ldr	r0, [pc, #56]	; (8001160 <disableAllLeds+0x44>)
 8001126:	f000 fdda 	bl	8001cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2104      	movs	r1, #4
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <disableAllLeds+0x44>)
 8001130:	f000 fdd5 	bl	8001cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2108      	movs	r1, #8
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <disableAllLeds+0x44>)
 800113a:	f000 fdd0 	bl	8001cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2110      	movs	r1, #16
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <disableAllLeds+0x44>)
 8001144:	f000 fdcb 	bl	8001cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <disableAllLeds+0x44>)
 800114e:	f000 fdc6 	bl	8001cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2140      	movs	r1, #64	; 0x40
 8001156:	4802      	ldr	r0, [pc, #8]	; (8001160 <disableAllLeds+0x44>)
 8001158:	f000 fdc1 	bl	8001cde <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40010800 	.word	0x40010800

08001164 <INIT_MODE>:
	LEDREDX_LEDGREENY,
	LEDREDX_LEDAMBERY,
	LEDREDY_LEDGREENX,
	LEDREDY_LEDAMBERX
} statusNormalMode = LEDREDX_LEDGREENY;
void INIT_MODE(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	statusNormalMode = LEDREDX_LEDGREENY;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <INIT_MODE+0x24>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
	setTimerNormalModeX(timeRed);
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <INIT_MODE+0x28>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f9a8 	bl	80014c8 <setTimerNormalModeX>
	setTimerNormalModeY(timeGreen);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <INIT_MODE+0x2c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f9b7 	bl	80014f0 <setTimerNormalModeY>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000080 	.word	0x20000080
 800118c:	20000040 	.word	0x20000040
 8001190:	20000048 	.word	0x20000048

08001194 <normalMode>:
void normalMode(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	switch (statusNormalMode) {
 8001198:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <normalMode+0x1b0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b03      	cmp	r3, #3
 800119e:	f200 80cd 	bhi.w	800133c <normalMode+0x1a8>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <normalMode+0x14>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	08001215 	.word	0x08001215
 80011b0:	0800127b 	.word	0x0800127b
 80011b4:	080012d7 	.word	0x080012d7
		case LEDREDX_LEDGREENY:
			if (timer_normal_mode_flagX==1){
 80011b8:	4b63      	ldr	r3, [pc, #396]	; (8001348 <normalMode+0x1b4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10f      	bne.n	80011e0 <normalMode+0x4c>
				statusNormalMode = LEDREDY_LEDGREENX;
 80011c0:	4b60      	ldr	r3, [pc, #384]	; (8001344 <normalMode+0x1b0>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 80011c6:	f7ff ffa9 	bl	800111c <disableAllLeds>
				setTimerNormalModeX(timeAmber);
 80011ca:	4b60      	ldr	r3, [pc, #384]	; (800134c <normalMode+0x1b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f97a 	bl	80014c8 <setTimerNormalModeX>
				setTimerNormalModeY(timeRed);
 80011d4:	4b5e      	ldr	r3, [pc, #376]	; (8001350 <normalMode+0x1bc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f989 	bl	80014f0 <setTimerNormalModeY>
				break;
 80011de:	e0ae      	b.n	800133e <normalMode+0x1aa>
			}
			if (timer_normal_mode_flagY == 1){
 80011e0:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <normalMode+0x1c0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10a      	bne.n	80011fe <normalMode+0x6a>
				statusNormalMode = LEDREDX_LEDAMBERY;
 80011e8:	4b56      	ldr	r3, [pc, #344]	; (8001344 <normalMode+0x1b0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 80011ee:	f7ff ff95 	bl	800111c <disableAllLeds>
				setTimerNormalModeY(timeAmber);
 80011f2:	4b56      	ldr	r3, [pc, #344]	; (800134c <normalMode+0x1b8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f97a 	bl	80014f0 <setTimerNormalModeY>
				break;
 80011fc:	e09f      	b.n	800133e <normalMode+0x1aa>
			}
			HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2102      	movs	r1, #2
 8001202:	4855      	ldr	r0, [pc, #340]	; (8001358 <normalMode+0x1c4>)
 8001204:	f000 fd6b 	bl	8001cde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	4852      	ldr	r0, [pc, #328]	; (8001358 <normalMode+0x1c4>)
 800120e:	f000 fd66 	bl	8001cde <HAL_GPIO_WritePin>
			break;
 8001212:	e094      	b.n	800133e <normalMode+0x1aa>
		case LEDREDX_LEDAMBERY:
			if (timer_normal_mode_flagX == 1){
 8001214:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <normalMode+0x1b4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d10f      	bne.n	800123c <normalMode+0xa8>
				statusNormalMode = LEDREDY_LEDGREENX;
 800121c:	4b49      	ldr	r3, [pc, #292]	; (8001344 <normalMode+0x1b0>)
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 8001222:	f7ff ff7b 	bl	800111c <disableAllLeds>
				setTimerNormalModeX(timeGreen);
 8001226:	4b4d      	ldr	r3, [pc, #308]	; (800135c <normalMode+0x1c8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f94c 	bl	80014c8 <setTimerNormalModeX>
				setTimerNormalModeY(timeRed);
 8001230:	4b47      	ldr	r3, [pc, #284]	; (8001350 <normalMode+0x1bc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f95b 	bl	80014f0 <setTimerNormalModeY>
				break;
 800123a:	e080      	b.n	800133e <normalMode+0x1aa>
			}
			if (timer_normal_mode_flagY == 1){
 800123c:	4b45      	ldr	r3, [pc, #276]	; (8001354 <normalMode+0x1c0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10f      	bne.n	8001264 <normalMode+0xd0>
				statusNormalMode = LEDREDY_LEDGREENX;
 8001244:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <normalMode+0x1b0>)
 8001246:	2202      	movs	r2, #2
 8001248:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 800124a:	f7ff ff67 	bl	800111c <disableAllLeds>
				setTimerNormalModeX(timeGreen);
 800124e:	4b43      	ldr	r3, [pc, #268]	; (800135c <normalMode+0x1c8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f938 	bl	80014c8 <setTimerNormalModeX>
				setTimerNormalModeY(timeRed);
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <normalMode+0x1bc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f947 	bl	80014f0 <setTimerNormalModeY>
				break;
 8001262:	e06c      	b.n	800133e <normalMode+0x1aa>
			}
			HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2102      	movs	r1, #2
 8001268:	483b      	ldr	r0, [pc, #236]	; (8001358 <normalMode+0x1c4>)
 800126a:	f000 fd38 	bl	8001cde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	4839      	ldr	r0, [pc, #228]	; (8001358 <normalMode+0x1c4>)
 8001274:	f000 fd33 	bl	8001cde <HAL_GPIO_WritePin>
			break;
 8001278:	e061      	b.n	800133e <normalMode+0x1aa>
		case LEDREDY_LEDGREENX:
			if (timer_normal_mode_flagY == 1){
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <normalMode+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10f      	bne.n	80012a2 <normalMode+0x10e>
				statusNormalMode = LEDREDX_LEDGREENY;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <normalMode+0x1b0>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 8001288:	f7ff ff48 	bl	800111c <disableAllLeds>
				setTimerNormalModeX(timeRed);
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <normalMode+0x1bc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f919 	bl	80014c8 <setTimerNormalModeX>
				setTimerNormalModeY(timeGreen);
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <normalMode+0x1c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f928 	bl	80014f0 <setTimerNormalModeY>
				break;
 80012a0:	e04d      	b.n	800133e <normalMode+0x1aa>
			}
			if (timer_normal_mode_flagX == 1){
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <normalMode+0x1b4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10a      	bne.n	80012c0 <normalMode+0x12c>
				statusNormalMode = LEDREDY_LEDAMBERX;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <normalMode+0x1b0>)
 80012ac:	2203      	movs	r2, #3
 80012ae:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 80012b0:	f7ff ff34 	bl	800111c <disableAllLeds>
				setTimerNormalModeX(timeAmber);
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <normalMode+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f905 	bl	80014c8 <setTimerNormalModeX>
				break;
 80012be:	e03e      	b.n	800133e <normalMode+0x1aa>
			}
			HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2108      	movs	r1, #8
 80012c4:	4824      	ldr	r0, [pc, #144]	; (8001358 <normalMode+0x1c4>)
 80012c6:	f000 fd0a 	bl	8001cde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2110      	movs	r1, #16
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <normalMode+0x1c4>)
 80012d0:	f000 fd05 	bl	8001cde <HAL_GPIO_WritePin>
			break;
 80012d4:	e033      	b.n	800133e <normalMode+0x1aa>
		case LEDREDY_LEDAMBERX:
			if (timer_normal_mode_flagY == 1){
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <normalMode+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10f      	bne.n	80012fe <normalMode+0x16a>
				statusNormalMode = LEDREDX_LEDGREENY;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <normalMode+0x1b0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 80012e4:	f7ff ff1a 	bl	800111c <disableAllLeds>
				setTimerNormalModeX(timeRed);
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <normalMode+0x1bc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f8eb 	bl	80014c8 <setTimerNormalModeX>
				setTimerNormalModeY(timeGreen);
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <normalMode+0x1c8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f8fa 	bl	80014f0 <setTimerNormalModeY>
				break;
 80012fc:	e01f      	b.n	800133e <normalMode+0x1aa>
			}
			if (timer_normal_mode_flagX == 1){
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <normalMode+0x1b4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10f      	bne.n	8001326 <normalMode+0x192>
				statusNormalMode = LEDREDX_LEDGREENY;
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <normalMode+0x1b0>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
				disableAllLeds();
 800130c:	f7ff ff06 	bl	800111c <disableAllLeds>
				setTimerNormalModeX(timeRed);
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <normalMode+0x1bc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f8d7 	bl	80014c8 <setTimerNormalModeX>
				setTimerNormalModeY(timeGreen);
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <normalMode+0x1c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f8e6 	bl	80014f0 <setTimerNormalModeY>
				break;
 8001324:	e00b      	b.n	800133e <normalMode+0x1aa>
			}
			HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <normalMode+0x1c4>)
 800132c:	f000 fcd7 	bl	8001cde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2110      	movs	r1, #16
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <normalMode+0x1c4>)
 8001336:	f000 fcd2 	bl	8001cde <HAL_GPIO_WritePin>
			break;
 800133a:	e000      	b.n	800133e <normalMode+0x1aa>
		default:
			break;
 800133c:	bf00      	nop
	}
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000080 	.word	0x20000080
 8001348:	20000098 	.word	0x20000098
 800134c:	20000044 	.word	0x20000044
 8001350:	20000040 	.word	0x20000040
 8001354:	200000a0 	.word	0x200000a0
 8001358:	40010800 	.word	0x40010800
 800135c:	20000048 	.word	0x20000048

08001360 <changeTimeRedMode>:
void changeTimeRedMode(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	if (timer_blink_flag == 1) {
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <changeTimeRedMode+0x38>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10a      	bne.n	8001382 <changeTimeRedMode+0x22>
		HAL_GPIO_TogglePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin);
 800136c:	2102      	movs	r1, #2
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <changeTimeRedMode+0x3c>)
 8001370:	f000 fccd 	bl	8001d0e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin);
 8001374:	2110      	movs	r1, #16
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <changeTimeRedMode+0x3c>)
 8001378:	f000 fcc9 	bl	8001d0e <HAL_GPIO_TogglePin>
		setTimerBlink(50);
 800137c:	2032      	movs	r0, #50	; 0x32
 800137e:	f000 f88f 	bl	80014a0 <setTimerBlink>
	}
	displayNumSEGX(2);
 8001382:	2002      	movs	r0, #2
 8001384:	f7ff fd18 	bl	8000db8 <displayNumSEGX>
	displayNumSEGY(timeRedBuffer);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <changeTimeRedMode+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fd37 	bl	8000e00 <displayNumSEGY>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000008c 	.word	0x2000008c
 800139c:	40010800 	.word	0x40010800
 80013a0:	2000004c 	.word	0x2000004c

080013a4 <changeTimeAmberMode>:
void changeTimeAmberMode(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	if (timer_blink_flag == 1) {
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <changeTimeAmberMode+0x38>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d10a      	bne.n	80013c6 <changeTimeAmberMode+0x22>
		HAL_GPIO_TogglePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin);
 80013b0:	2104      	movs	r1, #4
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <changeTimeAmberMode+0x3c>)
 80013b4:	f000 fcab 	bl	8001d0e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin);
 80013b8:	2120      	movs	r1, #32
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <changeTimeAmberMode+0x3c>)
 80013bc:	f000 fca7 	bl	8001d0e <HAL_GPIO_TogglePin>
		setTimerBlink(50);
 80013c0:	2032      	movs	r0, #50	; 0x32
 80013c2:	f000 f86d 	bl	80014a0 <setTimerBlink>
	}
	displayNumSEGX(3);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f7ff fcf6 	bl	8000db8 <displayNumSEGX>
	displayNumSEGY(timeAmberBuffer);
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <changeTimeAmberMode+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fd15 	bl	8000e00 <displayNumSEGY>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000008c 	.word	0x2000008c
 80013e0:	40010800 	.word	0x40010800
 80013e4:	20000050 	.word	0x20000050

080013e8 <changeTimeGreenMode>:
void changeTimeGreenMode(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	if (timer_blink_flag == 1) {
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <changeTimeGreenMode+0x38>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10a      	bne.n	800140a <changeTimeGreenMode+0x22>
		HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
 80013f4:	2108      	movs	r1, #8
 80013f6:	480b      	ldr	r0, [pc, #44]	; (8001424 <changeTimeGreenMode+0x3c>)
 80013f8:	f000 fc89 	bl	8001d0e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin);
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <changeTimeGreenMode+0x3c>)
 8001400:	f000 fc85 	bl	8001d0e <HAL_GPIO_TogglePin>
		setTimerBlink(50);
 8001404:	2032      	movs	r0, #50	; 0x32
 8001406:	f000 f84b 	bl	80014a0 <setTimerBlink>
	}
	displayNumSEGX(4);
 800140a:	2004      	movs	r0, #4
 800140c:	f7ff fcd4 	bl	8000db8 <displayNumSEGX>
	displayNumSEGY(timeGreenBuffer);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <changeTimeGreenMode+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fcf3 	bl	8000e00 <displayNumSEGY>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000008c 	.word	0x2000008c
 8001424:	40010800 	.word	0x40010800
 8001428:	20000054 	.word	0x20000054

0800142c <fsm>:
void fsm(){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(mode){
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <fsm+0x48>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	2b03      	cmp	r3, #3
 8001438:	d816      	bhi.n	8001468 <fsm+0x3c>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <fsm+0x14>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001451 	.word	0x08001451
 8001444:	08001457 	.word	0x08001457
 8001448:	0800145d 	.word	0x0800145d
 800144c:	08001463 	.word	0x08001463
	case 1:
		normalMode();
 8001450:	f7ff fea0 	bl	8001194 <normalMode>
		break;
 8001454:	e00c      	b.n	8001470 <fsm+0x44>
	case 2:
		changeTimeRedMode();
 8001456:	f7ff ff83 	bl	8001360 <changeTimeRedMode>
		break;
 800145a:	e009      	b.n	8001470 <fsm+0x44>
	case 3:
		changeTimeAmberMode();
 800145c:	f7ff ffa2 	bl	80013a4 <changeTimeAmberMode>
		break;
 8001460:	e006      	b.n	8001470 <fsm+0x44>
	case 4:
		changeTimeGreenMode();
 8001462:	f7ff ffc1 	bl	80013e8 <changeTimeGreenMode>
		break;
 8001466:	e003      	b.n	8001470 <fsm+0x44>
	default:
		mode = 1;
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <fsm+0x48>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
		break;
 800146e:	bf00      	nop
	}
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000003c 	.word	0x2000003c

08001478 <setTimer0>:


int timer_normal_modeY = 0;
int timer_normal_mode_flagY = 0;

void setTimer0(int duration){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <setTimer0+0x20>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <setTimer0+0x24>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000084 	.word	0x20000084
 800149c:	20000088 	.word	0x20000088

080014a0 <setTimerBlink>:
void setTimerBlink(int duration){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	timer_blink = duration;
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <setTimerBlink+0x20>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
	timer_blink_flag = 0;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <setTimerBlink+0x24>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000090 	.word	0x20000090
 80014c4:	2000008c 	.word	0x2000008c

080014c8 <setTimerNormalModeX>:
void setTimerNormalModeX(int duration){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	timer_normal_modeX = duration;
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <setTimerNormalModeX+0x20>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
	timer_normal_mode_flagX = 0;
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <setTimerNormalModeX+0x24>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000094 	.word	0x20000094
 80014ec:	20000098 	.word	0x20000098

080014f0 <setTimerNormalModeY>:
void setTimerNormalModeY(int duration){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	timer_normal_modeY = duration;
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <setTimerNormalModeY+0x20>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
	timer_normal_mode_flagY = 0;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <setTimerNormalModeY+0x24>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000009c 	.word	0x2000009c
 8001514:	200000a0 	.word	0x200000a0

08001518 <timerRun>:

void timerRun() {
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0){
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <timerRun+0x4c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	dd0b      	ble.n	800153c <timerRun+0x24>
		timer0_counter--;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <timerRun+0x4c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <timerRun+0x4c>)
 800152c:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0) {
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <timerRun+0x4c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dc02      	bgt.n	800153c <timerRun+0x24>
			timer0_flag = 1;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <timerRun+0x50>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer_blink > 0){
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <timerRun+0x54>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dd0b      	ble.n	800155c <timerRun+0x44>
		timer_blink--;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <timerRun+0x54>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <timerRun+0x54>)
 800154c:	6013      	str	r3, [r2, #0]
		if (timer_blink <= 0) {
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <timerRun+0x54>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dc02      	bgt.n	800155c <timerRun+0x44>
			timer_blink_flag = 1;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <timerRun+0x58>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000084 	.word	0x20000084
 8001568:	20000088 	.word	0x20000088
 800156c:	20000090 	.word	0x20000090
 8001570:	2000008c 	.word	0x2000008c

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_MspInit+0x5c>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_MspInit+0x5c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_MspInit+0x5c>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x5c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_MspInit+0x5c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_MspInit+0x5c>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_MspInit+0x60>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_MspInit+0x60>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000

080015d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d113      	bne.n	8001612 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_TIM_Base_MspInit+0x44>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_TIM_Base_MspInit+0x44>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_TIM_Base_MspInit+0x44>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201c      	movs	r0, #28
 8001608:	f000 f9a1 	bl	800194e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160c:	201c      	movs	r0, #28
 800160e:	f000 f9ba 	bl	8001986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001666:	f000 f87f 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <TIM2_IRQHandler+0x10>)
 8001676:	f000 ffdb 	bl	8002630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000a4 	.word	0x200000a4

08001684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff fff8 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016ac:	4c09      	ldr	r4, [pc, #36]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f001 fb05 	bl	8002cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016be:	f7ff fbc3 	bl	8000e48 <main>
  bx lr
 80016c2:	4770      	bx	lr
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016cc:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 80016d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016d4:	200000f0 	.word	0x200000f0

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x28>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f923 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	200f      	movs	r0, #15
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff ff3c 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f93b 	bl	80019a2 <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f903 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000058 	.word	0x20000058
 8001760:	20000060 	.word	0x20000060
 8001764:	2000005c 	.word	0x2000005c

08001768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_IncTick+0x1c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_IncTick+0x20>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <HAL_IncTick+0x20>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000060 	.word	0x20000060
 8001788:	200000ec 	.word	0x200000ec

0800178c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_GetTick+0x10>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	200000ec 	.word	0x200000ec

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <__NVIC_EnableIRQ+0x34>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff90 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff2d 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff42 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff90 	bl	8001890 <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5f 	bl	800183c <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff35 	bl	8001804 <__NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffa2 	bl	80018f4 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e148      	b.n	8001c62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8137 	bne.w	8001c5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4aa3      	ldr	r2, [pc, #652]	; (8001c80 <HAL_GPIO_Init+0x2c4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d05e      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 80019f8:	4aa1      	ldr	r2, [pc, #644]	; (8001c80 <HAL_GPIO_Init+0x2c4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d875      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 80019fe:	4aa1      	ldr	r2, [pc, #644]	; (8001c84 <HAL_GPIO_Init+0x2c8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d058      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a04:	4a9f      	ldr	r2, [pc, #636]	; (8001c84 <HAL_GPIO_Init+0x2c8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d86f      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a0a:	4a9f      	ldr	r2, [pc, #636]	; (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d052      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a10:	4a9d      	ldr	r2, [pc, #628]	; (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d869      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a16:	4a9d      	ldr	r2, [pc, #628]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04c      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a1c:	4a9b      	ldr	r2, [pc, #620]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d863      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a22:	4a9b      	ldr	r2, [pc, #620]	; (8001c90 <HAL_GPIO_Init+0x2d4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d046      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a28:	4a99      	ldr	r2, [pc, #612]	; (8001c90 <HAL_GPIO_Init+0x2d4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d85d      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d82a      	bhi.n	8001a88 <HAL_GPIO_Init+0xcc>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d859      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <HAL_GPIO_Init+0x80>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001aa3 	.word	0x08001aa3
 8001a48:	08001ae5 	.word	0x08001ae5
 8001a4c:	08001aeb 	.word	0x08001aeb
 8001a50:	08001aeb 	.word	0x08001aeb
 8001a54:	08001aeb 	.word	0x08001aeb
 8001a58:	08001aeb 	.word	0x08001aeb
 8001a5c:	08001aeb 	.word	0x08001aeb
 8001a60:	08001aeb 	.word	0x08001aeb
 8001a64:	08001aeb 	.word	0x08001aeb
 8001a68:	08001aeb 	.word	0x08001aeb
 8001a6c:	08001aeb 	.word	0x08001aeb
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001aeb 	.word	0x08001aeb
 8001a78:	08001aeb 	.word	0x08001aeb
 8001a7c:	08001aeb 	.word	0x08001aeb
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aad 	.word	0x08001aad
 8001a88:	4a82      	ldr	r2, [pc, #520]	; (8001c94 <HAL_GPIO_Init+0x2d8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8e:	e02c      	b.n	8001aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e029      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e024      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e01f      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e01a      	b.n	8001aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e013      	b.n	8001aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	611a      	str	r2, [r3, #16]
          break;
 8001ad6:	e009      	b.n	8001aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	615a      	str	r2, [r3, #20]
          break;
 8001ae2:	e003      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x130>
          break;
 8001aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d801      	bhi.n	8001af6 <HAL_GPIO_Init+0x13a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_Init+0x13e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d802      	bhi.n	8001b08 <HAL_GPIO_Init+0x14c>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x152>
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	210f      	movs	r1, #15
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8090 	beq.w	8001c5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3c:	4b56      	ldr	r3, [pc, #344]	; (8001c98 <HAL_GPIO_Init+0x2dc>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a55      	ldr	r2, [pc, #340]	; (8001c98 <HAL_GPIO_Init+0x2dc>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_GPIO_Init+0x2dc>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b54:	4a51      	ldr	r2, [pc, #324]	; (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <HAL_GPIO_Init+0x2e4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1e0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a48      	ldr	r2, [pc, #288]	; (8001ca4 <HAL_GPIO_Init+0x2e8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1dc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a47      	ldr	r2, [pc, #284]	; (8001ca8 <HAL_GPIO_Init+0x2ec>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1d8>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e004      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b94:	2303      	movs	r3, #3
 8001b96:	e002      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	f002 0203 	and.w	r2, r2, #3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bae:	493b      	ldr	r1, [pc, #236]	; (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc8:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4933      	ldr	r1, [pc, #204]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	492d      	ldr	r1, [pc, #180]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	4929      	ldr	r1, [pc, #164]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4923      	ldr	r1, [pc, #140]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	491f      	ldr	r1, [pc, #124]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4919      	ldr	r1, [pc, #100]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	4915      	ldr	r1, [pc, #84]	; (8001cac <HAL_GPIO_Init+0x2f0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	3301      	adds	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f47f aeaf 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	372c      	adds	r7, #44	; 0x2c
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	10320000 	.word	0x10320000
 8001c84:	10310000 	.word	0x10310000
 8001c88:	10220000 	.word	0x10220000
 8001c8c:	10210000 	.word	0x10210000
 8001c90:	10120000 	.word	0x10120000
 8001c94:	10110000 	.word	0x10110000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]
 8001cea:	4613      	mov	r3, r2
 8001cec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cee:	787b      	ldrb	r3, [r7, #1]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf4:	887a      	ldrh	r2, [r7, #2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cfa:	e003      	b.n	8001d04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	611a      	str	r2, [r3, #16]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	400b      	ands	r3, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e26c      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8087 	beq.w	8001e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d60:	4b92      	ldr	r3, [pc, #584]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d00c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d6c:	4b8f      	ldr	r3, [pc, #572]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d112      	bne.n	8001d9e <HAL_RCC_OscConfig+0x5e>
 8001d78:	4b8c      	ldr	r3, [pc, #560]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d10b      	bne.n	8001d9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x12c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d168      	bne.n	8001e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e246      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x76>
 8001da8:	4b80      	ldr	r3, [pc, #512]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a7f      	ldr	r2, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e02e      	b.n	8001e14 <HAL_RCC_OscConfig+0xd4>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x98>
 8001dbe:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7a      	ldr	r2, [pc, #488]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b78      	ldr	r3, [pc, #480]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a77      	ldr	r2, [pc, #476]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e01d      	b.n	8001e14 <HAL_RCC_OscConfig+0xd4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0xbc>
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a71      	ldr	r2, [pc, #452]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6e      	ldr	r2, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0xd4>
 8001dfc:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a67      	ldr	r2, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fcb6 	bl	800178c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fcb2 	bl	800178c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1fa      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0xe4>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fca2 	bl	800178c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fc9e 	bl	800178c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1e6      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x10c>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d063      	beq.n	8001f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e86:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d11c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x18c>
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	4b43      	ldr	r3, [pc, #268]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x176>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e1ba      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4939      	ldr	r1, [pc, #228]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e03a      	b.n	8001f42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fc57 	bl	800178c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fc53 	bl	800178c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e19b      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4927      	ldr	r1, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fc36 	bl	800178c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff fc32 	bl	800178c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e17a      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d03a      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d019      	beq.n	8001f8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff fc16 	bl	800178c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff fc12 	bl	800178c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e15a      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f000 fa9a 	bl	80024bc <RCC_Delay>
 8001f88:	e01c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7ff fbfc 	bl	800178c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f96:	e00f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff fbf8 	bl	800178c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d908      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e140      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	42420000 	.word	0x42420000
 8001fb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	4b9e      	ldr	r3, [pc, #632]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e9      	bne.n	8001f98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a6 	beq.w	800211e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd6:	4b97      	ldr	r3, [pc, #604]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10d      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b94      	ldr	r3, [pc, #592]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a93      	ldr	r2, [pc, #588]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b91      	ldr	r3, [pc, #580]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	4b8e      	ldr	r3, [pc, #568]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200a:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a8a      	ldr	r2, [pc, #552]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7ff fbb9 	bl	800178c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7ff fbb5 	bl	800178c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	; 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0fd      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	4b81      	ldr	r3, [pc, #516]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x312>
 8002044:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a7a      	ldr	r2, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6213      	str	r3, [r2, #32]
 8002050:	e02d      	b.n	80020ae <HAL_RCC_OscConfig+0x36e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x334>
 800205a:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a75      	ldr	r2, [pc, #468]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a72      	ldr	r2, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	e01c      	b.n	80020ae <HAL_RCC_OscConfig+0x36e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d10c      	bne.n	8002096 <HAL_RCC_OscConfig+0x356>
 800207c:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a6c      	ldr	r2, [pc, #432]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4a69      	ldr	r2, [pc, #420]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6213      	str	r3, [r2, #32]
 8002094:	e00b      	b.n	80020ae <HAL_RCC_OscConfig+0x36e>
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a66      	ldr	r2, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d015      	beq.n	80020e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fb69 	bl	800178c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fb65 	bl	800178c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0ab      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ee      	beq.n	80020be <HAL_RCC_OscConfig+0x37e>
 80020e0:	e014      	b.n	800210c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7ff fb53 	bl	800178c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7ff fb4f 	bl	800178c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e095      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ee      	bne.n	80020ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002112:	4b48      	ldr	r3, [pc, #288]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a47      	ldr	r2, [pc, #284]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8081 	beq.w	800222a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002128:	4b42      	ldr	r3, [pc, #264]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d061      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d146      	bne.n	80021ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCC_OscConfig+0x4fc>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff fb23 	bl	800178c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff fb1f 	bl	800178c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e067      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215c:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d108      	bne.n	8002184 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	492d      	ldr	r1, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a19      	ldr	r1, [r3, #32]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	430b      	orrs	r3, r1
 8002196:	4927      	ldr	r1, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x4fc>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff faf3 	bl	800178c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff faef 	bl	800178c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e037      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x46a>
 80021c8:	e02f      	b.n	800222a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_RCC_OscConfig+0x4fc>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fadc 	bl	800178c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff fad8 	bl	800178c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e020      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x498>
 80021f6:	e018      	b.n	800222a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e013      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
 800223c:	42420060 	.word	0x42420060

08002240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0d0      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	4965      	ldr	r1, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d040      	beq.n	8002360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e073      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06b      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b39      	ldr	r3, [pc, #228]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4936      	ldr	r1, [pc, #216]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002330:	f7ff fa2c 	bl	800178c <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7ff fa28 	bl	800178c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e053      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d210      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1cc>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1d0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f98a 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000
 8002404:	40021000 	.word	0x40021000
 8002408:	08002d38 	.word	0x08002d38
 800240c:	20000058 	.word	0x20000058
 8002410:	2000005c 	.word	0x2000005c

08002414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d002      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x30>
 800243e:	2b08      	cmp	r3, #8
 8002440:	d003      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x36>
 8002442:	e027      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002446:	613b      	str	r3, [r7, #16]
      break;
 8002448:	e027      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	0c9b      	lsrs	r3, r3, #18
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0c5b      	lsrs	r3, r3, #17
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002476:	fb02 f203 	mul.w	r2, r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e004      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	613b      	str	r3, [r7, #16]
      break;
 8002492:	e002      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002496:	613b      	str	r3, [r7, #16]
      break;
 8002498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249a:	693b      	ldr	r3, [r7, #16]
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	007a1200 	.word	0x007a1200
 80024b0:	08002d48 	.word	0x08002d48
 80024b4:	08002d58 	.word	0x08002d58
 80024b8:	003d0900 	.word	0x003d0900

080024bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <RCC_Delay+0x34>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <RCC_Delay+0x38>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0a5b      	lsrs	r3, r3, #9
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d8:	bf00      	nop
  }
  while (Delay --);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1e5a      	subs	r2, r3, #1
 80024de:	60fa      	str	r2, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <RCC_Delay+0x1c>
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000058 	.word	0x20000058
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e041      	b.n	800258e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff f85a 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f000 fa6e 	bl	8002a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d001      	beq.n	80025b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e035      	b.n	800261c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_TIM_Base_Start_IT+0x90>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_TIM_Base_Start_IT+0x4e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_Base_Start_IT+0x4e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_TIM_Base_Start_IT+0x94>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d111      	bne.n	800260a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d010      	beq.n	800261a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	e007      	b.n	800261a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40000400 	.word	0x40000400

08002630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0202 	mvn.w	r2, #2
 800265c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f9b4 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f9a7 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f9b6 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0204 	mvn.w	r2, #4
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f98a 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f97d 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f98c 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0208 	mvn.w	r2, #8
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2204      	movs	r2, #4
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f960 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f953 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f962 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b10      	cmp	r3, #16
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b10      	cmp	r3, #16
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0210 	mvn.w	r2, #16
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2208      	movs	r2, #8
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f936 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f929 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f938 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0201 	mvn.w	r2, #1
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fc8c 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d107      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fa6b 	bl	8002cb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d10e      	bne.n	800280c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d107      	bne.n	800280c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8fc 	bl	8002a04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b20      	cmp	r3, #32
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0220 	mvn.w	r2, #32
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa36 	bl	8002ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIM_ConfigClockSource+0x1c>
 8002858:	2302      	movs	r3, #2
 800285a:	e0b4      	b.n	80029c6 <HAL_TIM_ConfigClockSource+0x186>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800287a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d03e      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0xd4>
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289a:	f200 8087 	bhi.w	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a2:	f000 8086 	beq.w	80029b2 <HAL_TIM_ConfigClockSource+0x172>
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	d87f      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d01a      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xa6>
 80028b0:	2b70      	cmp	r3, #112	; 0x70
 80028b2:	d87b      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b60      	cmp	r3, #96	; 0x60
 80028b6:	d050      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x11a>
 80028b8:	2b60      	cmp	r3, #96	; 0x60
 80028ba:	d877      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b50      	cmp	r3, #80	; 0x50
 80028be:	d03c      	beq.n	800293a <HAL_TIM_ConfigClockSource+0xfa>
 80028c0:	2b50      	cmp	r3, #80	; 0x50
 80028c2:	d873      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d058      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x13a>
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d86f      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b30      	cmp	r3, #48	; 0x30
 80028ce:	d064      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d86b      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d060      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d867      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d05c      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d05a      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028e4:	e062      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f000 f95e 	bl	8002bb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	609a      	str	r2, [r3, #8]
      break;
 8002912:	e04f      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6899      	ldr	r1, [r3, #8]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f000 f947 	bl	8002bb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002936:	609a      	str	r2, [r3, #8]
      break;
 8002938:	e03c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	461a      	mov	r2, r3
 8002948:	f000 f8be 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2150      	movs	r1, #80	; 0x50
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f915 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 8002958:	e02c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	461a      	mov	r2, r3
 8002968:	f000 f8dc 	bl	8002b24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2160      	movs	r1, #96	; 0x60
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f905 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 8002978:	e01c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	461a      	mov	r2, r3
 8002988:	f000 f89e 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2140      	movs	r1, #64	; 0x40
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f8f5 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 8002998:	e00c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 f8ec 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 80029aa:	e003      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e000      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIM_Base_SetConfig+0xa8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <TIM_Base_SetConfig+0x28>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d003      	beq.n	8002a40 <TIM_Base_SetConfig+0x28>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <TIM_Base_SetConfig+0xac>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d108      	bne.n	8002a52 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <TIM_Base_SetConfig+0xa8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <TIM_Base_SetConfig+0x52>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d003      	beq.n	8002a6a <TIM_Base_SetConfig+0x52>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <TIM_Base_SetConfig+0xac>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d108      	bne.n	8002a7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <TIM_Base_SetConfig+0xa8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d103      	bne.n	8002ab0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	615a      	str	r2, [r3, #20]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40000400 	.word	0x40000400

08002ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 030a 	bic.w	r3, r3, #10
 8002b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0210 	bic.w	r2, r3, #16
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	031b      	lsls	r3, r3, #12
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	621a      	str	r2, [r3, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f043 0307 	orr.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e041      	b.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d009      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d004      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10c      	bne.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40000400 	.word	0x40000400

08002ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <__libc_init_array>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	2600      	movs	r6, #0
 8002ccc:	4d0c      	ldr	r5, [pc, #48]	; (8002d00 <__libc_init_array+0x38>)
 8002cce:	4c0d      	ldr	r4, [pc, #52]	; (8002d04 <__libc_init_array+0x3c>)
 8002cd0:	1b64      	subs	r4, r4, r5
 8002cd2:	10a4      	asrs	r4, r4, #2
 8002cd4:	42a6      	cmp	r6, r4
 8002cd6:	d109      	bne.n	8002cec <__libc_init_array+0x24>
 8002cd8:	f000 f822 	bl	8002d20 <_init>
 8002cdc:	2600      	movs	r6, #0
 8002cde:	4d0a      	ldr	r5, [pc, #40]	; (8002d08 <__libc_init_array+0x40>)
 8002ce0:	4c0a      	ldr	r4, [pc, #40]	; (8002d0c <__libc_init_array+0x44>)
 8002ce2:	1b64      	subs	r4, r4, r5
 8002ce4:	10a4      	asrs	r4, r4, #2
 8002ce6:	42a6      	cmp	r6, r4
 8002ce8:	d105      	bne.n	8002cf6 <__libc_init_array+0x2e>
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf0:	4798      	blx	r3
 8002cf2:	3601      	adds	r6, #1
 8002cf4:	e7ee      	b.n	8002cd4 <__libc_init_array+0xc>
 8002cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfa:	4798      	blx	r3
 8002cfc:	3601      	adds	r6, #1
 8002cfe:	e7f2      	b.n	8002ce6 <__libc_init_array+0x1e>
 8002d00:	08002d5c 	.word	0x08002d5c
 8002d04:	08002d5c 	.word	0x08002d5c
 8002d08:	08002d5c 	.word	0x08002d5c
 8002d0c:	08002d60 	.word	0x08002d60

08002d10 <memset>:
 8002d10:	4603      	mov	r3, r0
 8002d12:	4402      	add	r2, r0
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d100      	bne.n	8002d1a <memset+0xa>
 8002d18:	4770      	bx	lr
 8002d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d1e:	e7f9      	b.n	8002d14 <memset+0x4>

08002d20 <_init>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr

08002d2c <_fini>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr
